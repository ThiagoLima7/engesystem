generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  roleId        String    @unique
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  CPF           String
  admissionDate DateTime  @db.Timestamptz()
  UF            String
  bank          String?
  agency        String?
  account       String?
  operation     String?
  pixKey        String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @relation(fields: [roleId], references: [id])
}

model Role {
  id        String @id @default(cuid())
  name      String @unique
  // WARNING: Any modification to this values, change it on TypeScript side too,
  // which is in utils/utils.ts
  // Hierarchy:
  // 0: Incapaz de acessar o sistema
  // 1: Apontador
  // 2: Administrativo
  // 3: CEO
  hierarchy Int
  User      User?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
